package com.vexsoftware.ajdbc.wrapper;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import com.vexsoftware.ajdbc.DatabaseFuture;
import com.vexsoftware.ajdbc.DatabaseTask;

/**
 * Holds a {@link PreparedStatement} reference and provides methods for
 * asynchronous statement operations. Note that the methods in this class simply
 * wrap the similar methods in {@code PreparedStatement} and execute them
 * asynchronously - the behavior and returned objects do not differ.
 * 
 * @author Blake Beaupain
 */
public class AsynchronousPreparedStatement {

	/** The statement. */
	private final PreparedStatement statement;

	/**
	 * Instantiates a new {@code AsynchronousPreparedStatement}.
	 * 
	 * @param statement
	 *            The prepared statement
	 */
	public AsynchronousPreparedStatement(PreparedStatement statement) {
		this.statement = statement;
	}

	/**
	 * Executes the SQL statement in the {@code PreparedStatement} object
	 * asynchronously.
	 * 
	 * @return A database future representing this operation
	 */
	public DatabaseFuture<Boolean> execute() {
		return new DatabaseFuture<Boolean>(new DatabaseTask<Boolean>() {
			@Override
			protected Boolean execute() throws Throwable {
				return statement.execute();
			}
		});
	}

	/**
	 * Executes the SQL query in the {@code PreparedStatement} object and
	 * retrieves the {@code ResultSet} generated by the query asynchronously.
	 * 
	 * @return A database future representing this operation
	 */
	public DatabaseFuture<ResultSet> executeQuery() {
		return new DatabaseFuture<ResultSet>(new DatabaseTask<ResultSet>() {
			@Override
			protected ResultSet execute() throws Throwable {
				return statement.executeQuery();
			}
		});
	}

	/**
	 * Executes an update-related SQL statement in the {@code PreparedStatement}
	 * object asynchronously.
	 * 
	 * @return A database future representing this operation
	 */
	public DatabaseFuture<Integer> executeUpdate() {
		return new DatabaseFuture<Integer>(new DatabaseTask<Integer>() {
			@Override
			protected Integer execute() throws Throwable {
				return statement.executeUpdate();
			}
		});
	}

	/**
	 * Gets the {@code PreparedStatement} held by this object. Note that any
	 * methods called on this statement will be performed synchronously via the
	 * standard JDBC functionality.
	 * 
	 * @return The statement
	 */
	public PreparedStatement getStatement() {
		return statement;
	}

}
